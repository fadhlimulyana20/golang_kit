package usecase

import (
	"fmt"
	"template/internal/appctx"
	"template/internal/entities"
	"template/internal/params"
	"template/internal/respository"

	"github.com/jinzhu/copier"
	log "github.com/sirupsen/logrus"
)

type {{.PackageType}} struct {
	repo respository.UserRepository
	name string
}

type {{.Package}}Usecase interface {
	Create(param params.UserCreateParam) appctx.Response
}

func New{{.Package}}Usecase() UserUsecase {
	return &user{
		repo: respository.NewUserRepository(),
		name: "{{.Package}} USECASE",
	}
}

func ({{.PackageTypeFirstWord}} *{{.PackageType}}) Create(param params.UserCreateParam) appctx.Response {
	log.Info(fmt.Sprintf("[%s][Create] is executed", {{.PackageTypeFirstWord}}.name))

	var user entities.User
	copier.Copy(&user, &param)

	usr, err := {{.PackageTypeFirstWord}}.repo.Create(user)
	if err != nil {
		log.Error(fmt.Sprintf("[%s][Create] %s", {{.PackageTypeFirstWord}}.name, err.Error()))
		return *appctx.NewResponse().WithErrors(err.Error())
	}

	return *appctx.NewResponse().WithData(usr)
}
